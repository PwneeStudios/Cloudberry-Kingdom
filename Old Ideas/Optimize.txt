OPTIMIZE:
	* Replays (condense each replay to needed length, track total length, when exceeding limit remove longest prior recording)
		All textures in one
		Condense position vector into a single byte (by tracking differences). potentially have another array for big jumps.
	* Get rid of edge detect (for bendable quads extend full along the length, but on the ends only extend a touch or none)
		Would be more than a 100 fold speedup
	* Megatexture, minimize calls to Flush (which would almost be a 2 fold speedup for drawing)
	* Level creation profiling? (run a loop and then run nprof) (run a loop in the background and see when the game lags. turn off different parts of the makelevel code and see what helps)
	* Text:	combine drawstring and drawoutline into one draw (and the pngs into one png)
	* simpleobject xflip. should update fx bool if and only if current object's xflip is different than last.

* Optimize:
	LevelCleanup, use BSP (already written, debug?), only include in BSP objects with LimitGeneralDensity = true
	What else is going on in Bob.Phsx update?
	Should be able to completely remove Level.UpdateObjects2 (especially get rid of CalcBounds for AABox validate? Or just get rid of AABoxes and use only a floatrect?)
	ActiveBlockList
	

Optimize:
	BSP for cleanup
	don't swap to current


MEMORY:
	* thin/med/thick font, just scale for font size. add support in actual eztext initializer (each textbit tracks itself?)
	* Put some art into another folder, and give it its own Content loader (for instance, all the art for the initial menu/challenges/screenshots etc). Make sure this is cleaned before loading a level.
